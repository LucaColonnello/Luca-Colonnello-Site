/*
// QUEUE UTILITY

// EXAMPLE FOR JSFIDDLE TEST

var rand = 0;
var $body = $(document.body);
var $el = $("<div></div>");

var q = new queue();

// add element
q.add( function( next ){
    console.log( "1 task" );
    $body.append( $el );
    next();
} );

// add style
q.add( function( next ){
    console.log( "2 task" );
    $el.css( { background: 'yellow' } );
    next();
} );

// insert random num
q.add( function( next ){
    console.log( "3 task" );
    rand = parseInt(Math.random() * 100);
    $el.append( "<span>" + rand + "</span>" );
    next();
} );

// insert text for pair number
q.add( function( next ){
    console.log( "4 task" );
    $el.append( "<span> è un numero pari.</span>" );
    next();
} ).if(function(){
    return !(rand % 2);
});

// insert text for unpair number
q.add( function( next ){
    console.log( "5 task" );
    $el.append( "<span> è un numero dispari.</span>" );
    next();
} ).if(function(){
    return ( !(rand % 2) ? false : true );
});

q.start();

*/

// queue utility
module.exports = ( function( ){
	// obj
	var obj = {};

	// function repository
	obj.repository = [];

	// index repository
	obj.index = -1;

	// function next
	var next = function(){
		if( typeof obj.repository[ obj.index + 1 ] == "undefined" ) return;
		
		// increment index
		obj.index++;

		if( typeof obj.repository[ obj.index ] == "function" ) {
			// call function
			obj.repository[ obj.index ]( next );
		} else if(
            typeof obj.repository[ obj.index ] == "object" &&
            typeof obj.repository[ obj.index ].handle != "undefined" &&
            typeof obj.repository[ obj.index ].condition != "undefined"
        ) {
			if( obj.repository[ obj.index ].condition( ) ) {
				// call function
				obj.repository[ obj.index ].handle( next );
			} else {
				next( );
			}
		}
	};

	// add
	obj.add = function( handle ){
		// add function in repository
		obj.repository[ obj.repository.length ] = handle;
        
        // temp index var
        var _index = obj.repository.length - 1;
        
        // return promise for condition
        return {
            'if': function( condition ){
                if( condition === undefined ) return false;
                
                // add condition object to task
                obj.repository[ _index ] = {
                    handle: handle,
                    condition: condition
                };
            }
        };
	};

	// function start
	obj.start = function () {
		next( );
	};

	//return obj
	return obj;
} );


